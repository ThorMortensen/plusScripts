#!/bin/bash

# . plusScriptsPaths
# $PS_DIR/+extract

PS_DIR_PLUS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PS_DIR=${PS_DIR_PLUS%/*}
PS_DIR_CONFIG=$PS_DIR/config
PS_DIR_INSTALL=$PS_DIR/install
PS_DIR_WORKERS=$PS_DIR/workers
PS_DIR_RELEASES=$PS_DIR/releases
PS_DIR_BUILD_RES=$PS_DIR/build-recepies
PS_DIR_PERSIST="$HOME/.plus-script-persist"
PS_DIR_PERSIST_DEFAULT="$PS_DIR/persist-defaults"
# GITROOT="$(git rev-parse --show-toplevel)"

print_title() {
  dye bold cyan "$1"
}


print_link() {
    echo -e "\033[1;4;34m$1\033[0m"
}


start_time=$(date +%s)

spinner_running=false
spinner_pid=0

start_spinner() {
    local message=$1
    spinner=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")

    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color

    # Start the spinner in the background
    (
      while :; do
        for i in "${spinner[@]}"; do
          printf "\r${message} ${YELLOW}${i}${NC} "
          sleep 0.1
        done
      done
    ) &
    # Save the PID of the spinner
    spinner_pid=$!
    spinner_running=true
}


stop_spinner() {
    if [ "$spinner_running" = false ]; then
        return
    fi
    # Kill the spinner
    kill $spinner_pid
    spinner_running=false
    # Clear the line
    printf "\r\033[K"
}

use_braek_signal=false
break_flag=false

# Define a function to handle the SIGINT signal
handle_sigint() {
    stop_spinner
    if [ "$use_braek_signal" = false ]; then
        exit 1
    else 
        use_braek_signal=false
        break_flag=true
    fi
}
trap handle_sigint SIGINT
# Declare the mapping of IDs to names
declare -A ids_to_names
ids_to_names=(
    ["port2"]="logi02"
    ["port4"]="logi04"
)
GLOBAL_RELEASE_SELECTED="global-release-selected"
GLOBAL_PORT_SELECTED="global-port-selected"
GLOBAL_SERVICE_SELECTED="global-service-selected"
REMOTE_SERVICE_CASH="$PS_DIR_PERSIST_DEFAULT/remote-service-list"
GLOBAL_FEATURE_FLAG_SELECTED="global-feature-flag-selected"
FEATURE_FLAGS="$PS_DIR_PERSIST_DEFAULT/feature-flags"

persist_name=$(basename "$0")

SELECTED_DEVICE=""

select_port() {
  device=$(plus-menu --items "port2 port4" --persist-path "$GLOBAL_PORT_SELECTED" --prompt-msg "Select device") 
  echo "$device"
  SELECTED_DEVICE=$device
}

SELECTED_DEVICE_VARIANT=""

select_device_variant() {
  local device_variants="iwg26-v1 iwg26-v1-can-resistor iwg26-v2 iwg26-v2-vag iwg26-v3 iwg26-v3-ag iwg26-v3-ag-vag iwg26-v3-ag-vag-nostop iwg26-v3-ag-dual-bt iwg26-v3-ag-dual iwg26-v3-ag-triple iwg26-v3-ag-full"
  SELECTED_DEVICE_VARIANT=$(plus-menu --items "$device_variants" --persist-path "$persist_name-device-variant" --prompt-msg "Select device variant")
}

JWT_TOKEN_PATH="/tmp/jwt-token"


dye() {
  local format=""
  local color=""
  local text=""

  for arg in "$@"; do
    case $arg in
      bold|italic|blink)
        case $arg in
          bold) format=1 ;;
          italic) format=3 ;;
          blink) format=5 ;;
        esac
        ;;
      black|red|green|yellow|blue|magenta|cyan|white)
        case $arg in
          black) color=30 ;;
          red) color=31 ;;
          green) color=32 ;;
          yellow) color=33 ;;
          blue) color=34 ;;
          magenta) color=35 ;;
          cyan) color=36 ;;
          white) color=37 ;;
        esac
        ;;
      *)
        text="$arg"
        ;;
    esac
  done

  echo -e "\e[${format:-0};${color:-0}m${text}\e[0m"
}



prompt_default_yes() {
    read -p "$1 [Y/n]: " -r
    if [[ $REPLY =~ ^[Nn]$ ]]
    then
      echo "Aborted by user."
      exit 1
    fi
}

prompt_default_no() {
    read -p "$1 [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
      echo "Aborted by user."
      exit 1
    fi
}

prompt() {
    read -p "$1" -r
}

get_as_items() {
    local item_path=$1
    local items

    # Read the content of the file and replace newlines with spaces
    items=$(tr '\n' ' ' < "$item_path")

    # Remove any leading or trailing whitespace
    items=$(echo "$items" | xargs)

    echo "$items"
}